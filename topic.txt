nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns
helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb
helm list -A

name: Build and Push Container Image to Registry

on:
  workflow_call:
    outputs:
      IMAGE_DIGEST:
        description: Image digest of resulting docker image
        value: ${{ jobs.build-and-push.outputs.digest }}
    inputs:
      DOCKER_IMAGE_NAME:
        description: Name of Docker Image
        type: string 
        required: true 
      DOCKER_IMAGE_TAG:
        description: Tag of Docker Image
        type: string 
        required: true 
      DOCKERFILE_PATH:
        description: Path of Dockerfile
        type: string 
        required: true 
      BUILD_CONTEXT:
        description: Build Context
        type: string 
        default: .
        required: false 
      CLEAN_UP_IMAGES:
        description: Set to true to clean up old images. The number of images to retain can be configured using the MIN_VERSION_TO_KEEP input variable.
        type: boolean
        default: true
        required: false
      MIN_VERSIONS_TO_KEEP:
        description: The minimum number of image versions to keep starting with the latest version. To delete all versions set this to 0.
        type: number
        default: 50
        required: false
      TRIVYIGNORES:
        description: Comma-separated list of relative paths in repository to one or more .trivyignore files
        type: string
        default: ""
        required: false
      INCLUDE_TEST:
        description: Whether to execute test projects located in tests folder
        type: boolean
        default: true
        required: false

permissions: 
  contents: read
  packages: write

env: 
  DOCKER_REGISTRY: ghcr.io
  ORGANISATION_NAME: frasers-group
  TEST_TAG: test

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.push-image.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Updated to use a simpler tag reference for clarity

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1  # Updated to use a simpler tag reference for clarity

      - name: Log in to GitHub container registry
        uses: docker/login-action@v1  # Updated to use a simpler tag reference for clarity
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Add Source
        if: ${{ inputs.INCLUDE_TEST }}
        run: dotnet nuget add source --username 'github' --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name 'github' 'https://nuget.pkg.github.com/frasers-group/index.json'

      - name: Run Tests
        if: ${{ inputs.INCLUDE_TEST }}
        run: |
          for file in $(find . -type f -iname '*.tests.csproj' ! -path './packages/*' ! -path '*/obj/*' | grep -iv testadapter); do
            echo Executing tests in found test library $file
            dotnet test $file 
          done

      - name: Build Container Image 
        uses: docker/build-push-action@v2  # Updated to use a simpler tag reference for clarity
        with:
          load: true
          push: false
          tags: ${{ env.TEST_TAG }}
          file: ${{ inputs.DOCKERFILE_PATH }}
          context: ${{ inputs.BUILD_CONTEXT }}
          secrets: "github_token=${{ secrets.GITHUB_TOKEN }}"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@v0.2  # Updated to use a simpler tag reference for clarity
        with:
          image-ref: ${{ env.TEST_TAG }}
          format: table
          exit-code: 0  # don't fail workflow if vulnerabilities found
          ignore-unfixed: true
          trivyignores: ${{ inputs.TRIVYIGNORES }}
          vuln-type: os,library
          severity: CRITICAL,HIGH
          
      - name: Run Checkov scan against Dockerfile
        uses: bridgecrewio/checkov-action@v2  # Updated to use a simpler tag reference for clarity
        if: always()
        with:
          quiet: true  # display only failed checks
          soft_fail: true  # don't fail workflow if vulnerabilities found
          file: ${{ inputs.DOCKERFILE_PATH }}
          framework: dockerfile
          skip_check: CKV_DOCKER_2

      # Conditional push to registry only on push events
      - name: Push container image to registry
        if: github.event_name == 'push'  # Only execute this step if the workflow was triggered by a push event
        id: push-image
        uses: docker/build-push-action@v2  # Updated to use a simpler tag reference for clarity
        with:
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.ORGANISATION_NAME }}/${{ inputs.DOCKER_IMAGE_NAME }}:${{ inputs.DOCKER_IMAGE_TAG }}
          file: ${{ inputs.DOCKERFILE_PATH }}
          context: ${{ inputs.BUILD_CONTEXT }}

      - name: Clean-up old images
        if: inputs.CLEAN_UP_IMAGES
        uses: actions/delete-package-versions@v2  # Updated to use a simpler tag reference for clarity
        with:
          package-name: ${{ inputs.DOCKER_IMAGE_NAME }}
          package-type: container
          min-versions-to-keep: ${{ inputs.MIN_VERSIONS_TO_KEEP }}
