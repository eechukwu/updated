nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns
helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb
helm list -A

name: Deploy CMS Service Anthos
on:
  push:
    branches:
      - main
    paths:
      - 'sites/content-x/**'
      - 'packages/**'

  # pull_request:
  #   branches:
  #     - main
  #   paths:
  #     - 'sites/content-x/**'
  #     - 'packages/**'

  workflow_dispatch:

jobs:
  build-and-push:
    uses: frasers-group/te-reusable-workflows-devops/.github/workflows/build-and-push-container-registry.yml@main
    with:
      DOCKER_IMAGE_NAME: ec-cms-service
      DOCKER_IMAGE_TAG: ${{ github.sha }}
      DOCKERFILE_PATH: sites/content-x/Dockerfile
      BUILD_CONTEXT: .
      MIN_VERSIONS_TO_KEEP: 200

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-and-push
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      id-token: write

    env:
      COMPONENT_NAME: cms-service
      GCP_SERVICE_ACCOUNT_PREFIX: ec-argo
      GCP_PROJECT_ID: ecom-dev-fgp-anthos-2885
      GCP_PROJECT_NUMBER: '508929099641'

    steps:
      - name: Authenticate with GCP
        id: gcp-auth
        uses: google-github-actions/auth@5a50e581162a13f4baa8916d01180d2acbc04363 # v2.1.0
        with:
          workload_identity_provider: 'projects/${{ env.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions/providers/github-actions'
          service_account: '${{ env.GCP_SERVICE_ACCOUNT_PREFIX }}-gh@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com'

      - name: Obtain GitHub App information
        id: obtain-secrets
        uses: google-github-actions/get-secretmanager-secrets@61067887622dee4939d68e379b4264a57534fdf6 #v2.1.0
        with:
          secrets: |-
            github-app-id:${{ env.GCP_PROJECT_ID }}/${{ env.GCP_SERVICE_ACCOUNT_PREFIX }}-github-app-id
            github-app-installation-id:${{ env.GCP_PROJECT_ID }}/${{ env.GCP_SERVICE_ACCOUNT_PREFIX }}-github-app-installation-id
            github-app-private-key:${{ env.GCP_PROJECT_ID }}/${{ env.GCP_SERVICE_ACCOUNT_PREFIX }}-github-app-private-key

      - name: Retrieve app token
        id: get-app-token
        uses: frasers-group/ec-fx-github-action-get-token-action-devops@main
        with:
          app-id: '${{ steps.obtain-secrets.outputs.github-app-id }}'
          private-key: '${{ steps.obtain-secrets.outputs.github-app-private-key }}'
          installation-id: '${{ steps.obtain-secrets.outputs.github-app-installation-id }}'

      - name: Trigger deploy workflow
        uses: peter-evans/repository-dispatch@ff45666b9427631e3450c54a1bcbee4d9ff4d7c0 #v3.0.0
        with:
          token: ${{ steps.get-app-token.outputs.app-token }}
          repository: frasers-group/ec-frasersgroupplatform-k8s
          event-type: deploy-cms-service
          client-payload: >
            {
              "IMAGE_TAG": "${{ github.sha }}",
              "IMAGE_DIGEST": "${{ needs.build-and-push.outputs.IMAGE_DIGEST }}",
              "COMPONENT_NAME": "${{ env.COMPONENT_NAME }}"
            }
