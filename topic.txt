|| Cluster || Addon 1 || Addon 2 || Addon 3 || ... || Addon 20 ||
| Cluster 1 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 2 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 3 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 4 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 5 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 6 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 7 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 8 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 9 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 10| [ ]      | [ ]      | [ ]      | ...  | [ ]       |

# deployments_inspector.py

import subprocess
from clusters import CLUSTERS, switch_context

def get_deployments():
    """
    Retrieves deployments in the current Kubernetes context.
    Returns a tuple of two lists: (api_deployments, other_deployments)
    """
    cmd = ['kubectl', 'get', 'deployments', '-o', 'json']
    proc = subprocess.run(cmd, capture_output=True, text=True)
    if proc.returncode != 0:
        print(f"Error retrieving deployments: {proc.stderr}")
        return ([], [])
    
    try:
        deployments = json.loads(proc.stdout)
    except json.JSONDecodeError:
        print("Failed to decode deployment data.")
        return ([], [])

    api_deployments = []
    other_deployments = []

    for deployment in deployments.get('items', []):
        name = deployment['metadata']['name']
        replicas = deployment['spec']['replicas']
        if replicas == 1:
            if name.endswith('Api'):
                api_deployments.append(name)
            else:
                other_deployments.append(name)

    return (api_deployments, other_deployments)

def main():
    for cluster in CLUSTERS:
        if switch_context(cluster):
            print(f"Checking cluster: {cluster['name']}")
            api_deployments, other_deployments = get_deployments()

            if api_deployments:
                print("\nDeployments ending with 'Api' and running one replica:")
                for dep in api_deployments:
                    print(dep)
            else:
                print("\nNo deployments ending with 'Api' and running one replica found.")

            if other_deployments:
                print("\nOther deployments running one replica:")
                for dep in other_deployments:
                    print(dep)
            else:
                print("\nNo other deployments running one replica found.")

            print("-" * 40)

if __name__ == "__main__":
    import json  # Make sure to import json at the top if not already imported
    main()
