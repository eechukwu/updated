The Python scripts you provided are focused on gathering and monitoring various metrics and statuses related to Kubernetes clusters. Here are the key metrics being measured:

- **Component Statuses**: This metric involves retrieving the status of various core Kubernetes components such as the API server, scheduler, etc.

- **Nodes**: Measures the information and status about the nodes in the Kubernetes cluster, including details like node health, availability, and configuration.

- **Deployments**: Retrieves and filters information about Kubernetes deployments across all namespaces, while ignoring certain specified namespaces.

- **Pods**: Similar to deployments, this metric includes retrieving details about all pods across namespaces, again with specific namespaces ignored.

- **Pods by Restart Count**: This metric specifically measures the number of restarts for each pod, indicating stability or issues within pods.

- **Top Pods by CPU Usage**: Measures and lists pods consuming the most CPU resources, which helps in identifying high-load or possibly problematic pods.

- **Top Nodes by CPU Usage**: Similar to pod CPU usage, but focused on the nodes, helping to pinpoint nodes under high computational stress.

- **Ingress URLs Health Check**: This involves gathering URLs from Kubernetes ingress resources and checking their health endpoints, primarily validating if the URLs respond with a 200 HTTP status code, indicating they are operational. It also captures other statuses like 404 or unexpected errors, indicating potential issues.

These metrics are crucial for maintaining the operational health and efficiency of Kubernetes clusters, providing administrators with the necessary data to manage cluster resources effectively and troubleshoot issues as they arise.
