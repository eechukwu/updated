nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns


 
     

helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb


- name: Tag and Push Images as Rollback
  run: |
    # Define the full path without the specific image tag
    REGISTRY_HOST="${{ env.REGISTRY_HOST }}"
    PROJECT_ID="${{ env.PROJECT_ID }}"
    REPOSITORY="${{ env.REPOSITORY }}"
    FULL_PATH="$REGISTRY_HOST/$PROJECT_ID/$REPOSITORY"
    
    DATE_TAG=$(date "+%Y%m%d%H%M%S")
    EXCLUDE_TAG="${{ inputs.DOCKER_IMAGE_TAG }}"

    # Authenticate with gcloud and configure Docker
    echo "${{ secrets.GCLOUD_AUTH }}" | gcloud auth activate-service-account --key-file=-
    gcloud auth configure-docker "$REGISTRY_HOST",gcr.io

    # Fetch the latest 6 tags (excluding the most recent) and select the top 5 for rollback
    IFS=$'\n' READ_TAGS=($(gcloud artifacts docker images list "$FULL_PATH" --limit=6 | grep -v "$EXCLUDE_TAG" | head -n 5))
    unset IFS

    for TAG_INFO in "${READ_TAGS[@]}"; do
      ORIGINAL_TAG=$(echo "$TAG_INFO" | awk '{print $1}') # Adjust extraction based on actual output format
      if [[ -n "$ORIGINAL_TAG" && "$ORIGINAL_TAG" != "$EXCLUDE_TAG" ]]; then
        NEW_TAG="rollback-image-${DATE_TAG}-${ORIGINAL_TAG//,/}"
        IMAGE_NAME="$FULL_PATH" # Assuming the image name is consistent for rollback tags
        
        echo "Tagging and pushing $IMAGE_NAME:$ORIGINAL_TAG as $IMAGE_NAME:$NEW_TAG"
        
        # Pull the original image by tag
        docker pull "$IMAGE_NAME:$ORIGINAL_TAG"
        
        # Tag the image with the new rollback tag
        docker tag "$IMAGE_NAME:$ORIGINAL_TAG" "$IMAGE_NAME:$NEW_TAG"
        
        # Push the new tag to the registry
        docker push "$IMAGE_NAME:$NEW_TAG"
      fi
    done
