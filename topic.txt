nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns
helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb
helm list -A


build-and-deploy.yaml
name: Build and deploy application
on: 
  push:
    branches:
      - main
    paths-ignore:
      - "k8s/**" # This workflow MUST NOT trigger when changes are made to the kubernetes manifests folder
      - "**/kustomization.yaml"
      - ".github/workflows/**"

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-and-push:
   uses: frasers-group/te-reusable-workflows-devops/.github/workflows/build-and-push-container-registry.yml@main
   with:
     DOCKER_IMAGE_NAME: wh-reform-api
     DOCKER_IMAGE_TAG: ${{ github.sha }}
     DOCKERFILE_PATH: ./Dockerfile
  deploy-to-dev:
    name: Deploy to dev
    needs: 
      - build-and-push
    uses: frasers-group/te-reusable-workflows-devops/.github/workflows/cd-anthos-gcp-secrets.yml@main
    with:
      environment: dev # this should match the name of the Github environment to deploy to
      image-digest: ${{ needs.build-and-push.outputs.IMAGE_DIGEST }}
      kustomization-path: k8s/overlays/dev # append the name of the environment specific overlays folder
      branch: main # set to the branch which is being synced to ArgoCD
      service_account_prefix: wh-argo # SA to obtain GCP secrets for Github App
  
  deploy-to-test:
      name: Deploy to test
      needs: 
      - build-and-push
      - deploy-to-dev
      uses: frasers-group/te-reusable-workflows-devops/.github/workflows/cd-anthos-gcp-secrets.yml@main
      with:
        environment: test # this should match the name of the Github environment to deploy to
        image-digest: ${{ needs.build-and-push.outputs.IMAGE_DIGEST }}
        kustomization-path: k8s/overlays/test # add path to the folder containing the kustomize environment specific overlays folder
        branch: main # set to the branch which is being synced to ArgoCD
        service_account_prefix: wh-argo # SA to obtain GCP secrets for Github App

  deploy-to-prod:
      name: Deploy to prod
      needs: 
        - build-and-push
        - deploy-to-test
      uses: frasers-group/te-reusable-workflows-devops/.github/workflows/cd-anthos-gcp-secrets.yml@main 
      with:
        environment: prod # this should match the name of the Github environment to deploy to
        image-digest: ${{ needs.build-and-push.outputs.IMAGE_DIGEST }}
        kustomization-path: k8s/overlays/prod # append the name of the environment specific overlays folder
        branch: main # set to the branch which is being synced to ArgoCD
        service_account_prefix: wh-argo # SA to obtain GCP secrets for Github App
		
		
build-and-push-container-registry.yml
		
name: Build and Push Container Image to Registry

on:
  workflow_call:
    outputs:
      IMAGE_DIGEST:
        description: Image digest of resulting docker image
        value: ${{ jobs.build-and-push.outputs.digest }}
    inputs:
      DOCKER_IMAGE_NAME:
        description: Name of Docker Image
        type: string 
        required: true 
      DOCKER_IMAGE_TAG:
        description: Tag of Docker Image
        type: string 
        required: true 
      DOCKERFILE_PATH:
        description: Path of Dockerfile
        type: string 
        required: true 
      BUILD_CONTEXT:
        description: Build Context
        type: string 
        default: .
        required: false 
      CLEAN_UP_IMAGES:
        description: Set to true to clean up old images.  The number of images to retain can be configured using the MIN_VERSION_TO_KEEP input variable.
        type: boolean
        default: true
        required: false
      MIN_VERSIONS_TO_KEEP:
        description: The minimum number of image versions to keep starting with the latest version. To delete all versions set this to 0.
        type: number
        default: 50
        required: false
      TRIVYIGNORES:
        description: Comma-separated list of relative paths in repository to one or more .trivyignore files
        type: string
        default: ""
        required: false
      INCLUDE_TEST:
        description: Whether to execute test projects located in tests folder
        type: boolean
        default: false
        required: false
      PUSH_IMAGE:
        description: Whether to push the built image to the registry
        required: false
        type: boolean
        default: true

permissions: 
  contents: read
  packages: write

env: 
  DOCKER_REGISTRY: ghcr.io
  ORGANISATION_NAME: frasers-group
  TEST_TAG: test

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.push-image.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab  # v3.5.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4b4e9c3e2d4531116a6f8ba8e71fc6e2cb6e6c8c # v2.5.0

      - name: Log in to GitHub container registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a  # v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Add Source
        if: ${{ inputs.INCLUDE_TEST }}
        run: dotnet nuget add source --username 'github' --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name 'github' 'https://nuget.pkg.github.com/frasers-group/index.json'

      - name: Run Tests
        if: ${{ inputs.INCLUDE_TEST }}
        shell: bash
        run: |
          for file in $(find . -type f \( -iname '*.tests.csproj' \) ! -path './packages/*' ! -path '*/obj/*' | grep -iv testadapter); do
            echo Executing tests in found test library $file
            dotnet test $file 
          done

      - name: Build Container Image 
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671  # v4.0.0
        with:
          load: true
          push: false
          tags: ${{ env.TEST_TAG }}
          file: ${{ inputs.DOCKERFILE_PATH }}
          context: ${{ inputs.BUILD_CONTEXT }}
          secrets: |
            "github_token=${{ secrets.GITHUB_TOKEN }}"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@1f0aa582c8c8f5f7639610d6d38baddfea4fdcee  # v0.9.2
        with:
          image-ref: ${{ env.TEST_TAG }}
          format: table
          exit-code: 0 # don't fail workflow if vulnerabilities found
          ignore-unfixed: true
          trivyignores: ${{ inputs.TRIVYIGNORES }}
          vuln-type: os,library
          severity: CRITICAL,HIGH
          
      - name: Run Checkov scan against Dockerfile
        uses: bridgecrewio/checkov-action@aa3e7285ca8e279495412c57aedb6cb329b430b3  # v12.0.0
        if: always()
        with:
          quiet: true # display only failed checks
          soft_fail: true # don't fail workflow if vulnerabilities found
          file: ${{ inputs.DOCKERFILE_PATH }}
          framework: dockerfile
          skip_check: CKV_DOCKER_2

      - name: Push container image to registry
        if: inputs.PUSH_IMAGE  # Conditionally push based on the new input
        id: push-image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671  # v4.0.0
        with:
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.ORGANISATION_NAME }}/${{ inputs.DOCKER_IMAGE_NAME }}:${{ inputs.DOCKER_IMAGE_TAG }}
          file: ${{ inputs.DOCKERFILE_PATH }}
          context: ${{ inputs.BUILD_CONTEXT }}

      - name: Clean-up old images
        uses: actions/delete-package-versions@0d39a63126868f5eefaa47169615edd3c0f61e20  # v4.1.1
        if: inputs.CLEAN_UP_IMAGES
        with:
          package-name: ${{ inputs.DOCKER_IMAGE_NAME }}
          package-type: container
          min-versions-to-keep: ${{ inputs.MIN_VERSIONS_TO_KEEP }}
