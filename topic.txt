nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns
helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb

name: Build and Push Container Image to Registry

on:
  workflow_call:
    outputs:
      IMAGE_DIGEST:
        description: Image digest of resulting docker image
        value: ${{ jobs.build-and-push.outputs.digest }}
    inputs:
      DOCKER_IMAGE_NAME:
        description: Name of Docker Image
        type: string 
        required: true 
      DOCKER_IMAGE_TAG:
        description: Tag of Docker Image
        type: string 
        required: true 
      DOCKERFILE_PATH:
        description: Path of Dockerfile
        type: string 
        required: true 
      BUILD_CONTEXT:
        description: Build Context
        type: string 
        default: .
        required: false 
      CLEAN_UP_IMAGES:
        description: Set to true to clean up old images. The number of images to retain can be configured using the MIN_VERSION_TO_KEEP input variable.
        type: boolean
        default: true
        required: false
      MIN_VERSIONS_TO_KEEP:
        description: The minimum number of image versions to keep starting with the latest version. To delete all versions set this to 0.
        type: number
        default: 50
        required: false
      TRIVYIGNORES:
        description: Comma-separated list of relative paths in repository to one or more .trivyignore files
        type: string
        default: ""
        required: false
      INCLUDE_TEST:
        description: Whether to execute test projects located in tests folder
        type: boolean
        default: false
        required: false
      PUSH_IMAGE:
        description: Whether to push the built image to the registry
        required: false
        type: boolean
        default: true

permissions: 
  contents: read
  packages: write

env: 
  DOCKER_REGISTRY: ghcr.io
  ORGANISATION_NAME: frasers-group
  TEST_TAG: test

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.push-image.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Container Image 
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.BUILD_CONTEXT }}
          file: ${{ inputs.DOCKERFILE_PATH }}
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.ORGANISATION_NAME }}/${{ inputs.DOCKER_IMAGE_NAME }}:${{ inputs.DOCKER_IMAGE_TAG }}
  
  # Additional steps for managing tags and rollback images
  manage-tags:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Setup Google Cloud
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure Docker for Google Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Fetch the Previous active-image
        run: docker pull ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:active-image || true

      - name: Tag latest image as active-image
        run: |
          docker tag ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ inputs.DOCKER_IMAGE_TAG }} ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:active-image
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:active-image

      - name: Retag current 'active-image' as 'rollback-image'
        run: |
          docker tag ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:active-image ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:rollback-image-${{ github.run_id }}
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:rollback-image-${{ github.run_id }}

      - name: Untag the old rollback image
        run: |
          echo "Placeholder for untagging old rollback image logic"
          # Implement custom logic using `gcloud` to list, identify, and delete old rollback tags.
