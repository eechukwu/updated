nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns


 
     

helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb


- name: Debug and Generate Rollback Tags
  run: |
    FULL_IMAGE_NAME="${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}"
    DATE_TAG=$(date "+%Y%m%d")
    
    # Ensure gcloud is authenticated for debug purposes
    echo "${{ secrets.GCLOUD_AUTH }}" | gcloud auth activate-service-account --key-file=-
    
    # Print the command to debug it
    echo "Running command: gcloud artifacts docker images list $FULL_IMAGE_NAME --limit=10 --format='value(tags)'"
    
    # Store the command output for debugging
    COMMAND_OUTPUT=$(gcloud artifacts docker images list $FULL_IMAGE_NAME --limit=10 --format='value(tags)')
    
    # Check if COMMAND_OUTPUT is empty
    if [[ -z "$COMMAND_OUTPUT" ]]; then
      echo "The command returned no output. Possible reasons might include incorrect repository details or permissions issues."
    else
      echo "Command output received. Processing tags..."
      # Process the command output
      TAGS=$(echo "$COMMAND_OUTPUT" | tr ',' '\n' | head -n 10)
      
      if [[ -z "$TAGS" ]]; then
        echo "No tags to process."
      else
        echo "New rollback tags:"
        for TAG in $TAGS; do
          NEW_TAG="rollback-image-${DATE_TAG}-${TAG}"
          echo "$FULL_IMAGE_NAME:$NEW_TAG"
        done
      fi
    fi

