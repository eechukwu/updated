nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns


 
     

helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb


         - name: Retag Current Active-Image as Rollback and Manage Old Rollbacks
        run: |
          FULL_IMAGE_NAME="${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}"
          # Ensure the date tag for the operation is set
          DATE_TAG=$(date +%Y%m%d%H%M%S)

          # Fetch all image tags excluding the 'active-image'
          ALL_TAGS=$(gcloud container images list-tags $FULL_IMAGE_NAME --format='get(tags)' --limit=unlimited | tr ',' '\n' | grep -v '^$' | grep -v 'active-image')
          
          # Define arrays to hold sorted tags
          ROLLBACK_TAGS=()
          for TAG in $ALL_TAGS; do
              if [[ "$TAG" =~ ^[0-9]{14}$ ]]; then # Assuming existing rollback and old-rollback tags follow a YYYYMMDDHHMMSS format
                  ROLLBACK_TAGS+=("$TAG")
              fi
          done
          
          # Sort the tags to identify the latest 5 for rollback
          IFS=$'\n' ROLLBACK_TAGS=($(sort -r <<<"${ROLLBACK_TAGS[*]}"))
          unset IFS

          # Keep top 4 (since we exclude the current active image which is assumed to be the latest) and re-tag as rollback-image-<date>
          for i in "${!ROLLBACK_TAGS[@]}"; do
              TAG=${ROLLBACK_TAGS[$i]}
              if [ $i -lt 4 ]; then # Process for top 4 to make room for the new rollback tag making them top 5
                  NEW_TAG="rollback-image-${TAG}"
                  docker tag $FULL_IMAGE_NAME:$TAG $FULL_IMAGE_NAME:$NEW_TAG
                  docker push $FULL_IMAGE_NAME:$NEW_TAG
              else
                  # Beyond the top 4, re-tag as old-rollback-image-<date>
                  NEW_TAG="old-rollback-image-${TAG}"
                  docker tag $FULL_IMAGE_NAME:$TAG $FULL_IMAGE_NAME:$NEW_TAG
                  docker push $FULL_IMAGE_NAME:$NEW_TAG
              fi
          done

          # Finally, tag the current active-image as the newest rollback-image with date and push
          NEW_ROLLBACK_TAG="rollback-image-$DATE_TAG"
          docker tag $FULL_IMAGE_NAME:active-image $FULL_IMAGE_NAME:$NEW_ROLLBACK_TAG
          docker push $FULL_IMAGE_NAME:$NEW_ROLLBACK_TAG
