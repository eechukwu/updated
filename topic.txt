import subprocess
import json
import sys
import os

# Import from cluster.py
from cluster import CLUSTERS, switch_context, ANSIColors

def run_kubectl_command(command):
    """
    Runs a kubectl command and returns the JSON output.
    """
    result = subprocess.run(command, capture_output=True, text=True, check=True)
    return json.loads(result.stdout)

def convert_to_m(cpu_str):
    """
    Converts CPU string to millicores.
    """
    if cpu_str.endswith('m'):
        return int(cpu_str[:-1])
    return int(cpu_str) * 1000

def convert_to_mi(memory_str):
    """
    Converts memory string to MiB.
    """
    if memory_str.endswith('Ki'):
        return int(memory_str[:-2]) // 1024
    if memory_str.endswith('Mi'):
        return int(memory_str[:-2])
    if memory_str.endswith('Gi'):
        return int(memory_str[:-2]) * 1024
    if memory_str.endswith('Ti'):
        return int(memory_str[:-2]) * 1024 * 1024
    return int(memory_str) // (1024 * 1024)

def get_pods_data():
    # Get pod resource requests
    pods_json = run_kubectl_command(['kubectl', 'get', 'pods', '--all-namespaces', '-o', 'json'])

    # Get current pod utilization
    top_pods_output = subprocess.run(['kubectl', 'top', 'pods', '--all-namespaces'], capture_output=True, text=True, check=True).stdout

    # Parse the utilization data
    top_pods_lines = top_pods_output.strip().split('\n')
    top_pods_data = {}
    for line in top_pods_lines[1:]:  # Skip the header line
        parts = line.split()
        namespace = parts[0]
        name = parts[1]
        cpu_usage = parts[2]
        memory_usage = parts[3]
        top_pods_data[(namespace, name)] = {'cpu': cpu_usage, 'memory': memory_usage}

    # Combine the data
    combined_data = []
    for pod in pods_json['items']:
        namespace = pod['metadata']['namespace']
        name = pod['metadata']['name']
        cpu_request = sum(
            convert_to_m(container['resources']['requests'].get('cpu', '0'))
            for container in pod['spec']['containers']
            if 'resources' in container
        )
        memory_request = sum(
            convert_to_mi(container['resources']['requests'].get('memory', '0'))
            for container in pod['spec']['containers']
            if 'resources' in container
        )
        cpu_usage = top_pods_data.get((namespace, name), {}).get('cpu', 'N/A')
        memory_usage = top_pods_data.get((namespace, name), {}).get('memory', 'N/A')
        combined_data.append({
            'namespace': namespace,
            'name': name,
            'cpu_request': f'{cpu_request}m',
            'cpu_usage': cpu_usage,
            'memory_request': f'{memory_request}Mi',
            'memory_usage': memory_usage,
        })

    # Print the combined data
    print(f"{'NAMESPACE':<20}{'NAME':<30}{'CPU_REQUEST':<15}{'CPU_USAGE':<15}{'MEMORY_REQUEST':<15}{'MEMORY_USAGE':<15}")
    for data in combined_data:
        print(f"{data['namespace']:<20}{data['name']:<30}{data['cpu_request']:<15}{data['cpu_usage']:<15}{data['memory_request']:<15}{data['memory_usage']:<15}")

if __name__ == "__main__":
    for cluster in CLUSTERS:
        if switch_context(cluster):
            print(f"{ANSIColors.CYAN}Collecting data for cluster: {cluster['name']}{ANSIColors.ENDC}")
            get_pods_data()
