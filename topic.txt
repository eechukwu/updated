nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns
helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb
helm list -A



Certainly! Sharing a container image from Google Cloud Platform (GCP) Artifact Registry in one account (Account A) to a Google Kubernetes Engine (GKE) cluster in another account (Account B) involves a few steps. This guide assumes you have the necessary permissions in both accounts and have installed and configured the Google Cloud SDK (gcloud command-line tool).

Step 1: Configure IAM Permissions
In Account A (Image Source Account):

Ensure the Artifact Registry repository containing the image is configured to allow access from Account B. You may need to grant the roles/artifactregistry.reader role to a service account in Account B that will be used to pull the image.
In Account B (Destination Account):

Ensure the service account (or the account you are using) that will pull the image and deploy to GKE has the necessary permissions to interact with GKE and to pull images from Artifact Registry in another account.
Step 2: Configure Service Account in Account B
Create or use an existing service account in Account B that will be used to authenticate and pull the image.
If not already done, grant this service account permission to pull images from the Artifact Registry in Account A.
Create and download a JSON key for this service account.
Step 3: Configure Docker to Authenticate Using the Service Account
On your local machine or a CI/CD pipeline, configure Docker to authenticate to GCP using the service account key file:

sh
Copy code
gcloud auth activate-service-account --key-file=[PATH-TO-SERVICE-ACCOUNT-KEY-FILE]
gcloud auth configure-docker [REGION]-docker.pkg.dev
Replace [PATH-TO-SERVICE-ACCOUNT-KEY-FILE] with the path to your service account key file and [REGION] with the region of your Artifact Registry.

Step 4: Pull the Image from Account A
Pull the image from the Artifact Registry repository in Account A:

sh
Copy code
docker pull [REGION]-docker.pkg.dev/[PROJECT-ID]/[REPOSITORY-NAME]/[IMAGE]:[TAG]
Replace [REGION], [PROJECT-ID], [REPOSITORY-NAME], [IMAGE], and [TAG] with the appropriate values for the image you want to pull.

Step 5: Tag and Push the Image to a Repository Accessible by Account B
Tag the image for a repository in Account B (optional if deploying directly to GKE without storing in Account B):

sh
Copy code
docker tag [REGION]-docker.pkg.dev/[PROJECT-ID]/[REPOSITORY-NAME]/[IMAGE]:[TAG] [NEW-REGION]-docker.pkg.dev/[NEW-PROJECT-ID]/[NEW-REPOSITORY-NAME]/[IMAGE]:[TAG]
Push the image to the new repository (optional):

sh
Copy code
docker push [NEW-REGION]-docker.pkg.dev/[NEW-PROJECT-ID]/[NEW-REPOSITORY-NAME]/[IMAGE]:[TAG]
Step 6: Deploy the Image to GKE in Account B
Update your Kubernetes deployment YAML file to use the image from the Artifact Registry in Account A (if pulled directly) or the new image URL in Account B (if you pushed it to a repository in Account B).

Apply the deployment using kubectl:

sh
Copy code
kubectl apply -f [YOUR-DEPLOYMENT-YAML-FILE]
Notes:
Ensure that the GKE cluster in Account B has access to the service account key or is configured to authenticate to the Artifact Registry in Account A.
You might need to adjust firewall or network policies to allow communication between the GKE cluster and the Artifact Registry, especially if they are in different projects or organizations.
This guide provides a high-level overview. Depending on your specific setup, you might need to adjust permissions, roles, or network settings.








