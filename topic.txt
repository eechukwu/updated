nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns
helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb
helm list -A



Google Artifact Registry Replication

Enable Artifact Registry API: Make sure the Artifact Registry API is enabled in your Google Cloud project.
Identify Repositories: Decide which repository will be the source and which will be the target(s) for replication.
Create Target Repository: Create the target repository in its region if it doesn't exist.
Set Permissions: Grant the necessary read permissions on the source and write permissions on the target repository to the replication service account.
Enable Replication: Through the Google Cloud Console or CLI, set up the source repository to replicate to the target repository.

Replace placeholders (e.g., your-google-cloud-project-id, source-region, target-region) with your actual project ID and the regions you're using for the source and target repositories.

resource "google_artifact_registry_repository" "source_repo" {
  name     = "source-repo"
  location = "source-region" // Example: us-central1
  format   = "DOCKER"
  description = "Source repository for artifact replication"
}

resource "google_artifact_registry_repository" "target_repo" {
  name     = "target-repo"
  location = "target-region" // Example: europe-west1
  format   = "DOCKER"
  description = "Target repository for artifact replication"
}

resource "google_artifact_registry_repository_iam_binding" "source_repo_reader" {
  repository = google_artifact_registry_repository.source_repo.name
  location   = "source-region"
  role       = "roles/artifactregistry.reader"
  members = [
    "serviceAccount:service-account-for-replication@your-google-cloud-project-id.iam.gserviceaccount.com",
  ]
}

resource "google_artifact_registry_repository_iam_binding" "target_repo_writer" {
  repository = google_artifact_registry_repository.target_repo.name
  location   = "target-region"
  role       = "roles/artifactregistry.writer"
  members = [
    "serviceAccount:service-account-for-replication@your-google-cloud-project-id.iam.gserviceaccount.com",
  ]
}
