nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns
helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb

# Step 1: Docker build and push to registry with commit SHA tag
      # Assuming this step is already defined in your workflow

      # Step 2: Fetch the Previous active-image
      - name: Fetch Current Active-Image
        run: |
          docker pull europe-west2-docker.pkg.dev/sandbox-dallen-9871/demo-olufemi-registry/${{ inputs.DOCKER_IMAGE_NAME }}:active-image

      # Step 3: Tag latest image as active-image
      # This step is covered by your existing Docker push action with `active-image` tag

      # Step 4: Retag current 'active-image' as 'rollback-image'
      - name: Retag Current Active-Image as Rollback
        run: |
          # Tag the active-image as rollback-image
          docker tag europe-west2-docker.pkg.dev/sandbox-dallen-9871/demo-olufemi-registry/${{ inputs.DOCKER_IMAGE_NAME }}:active-image europe-west2-docker.pkg.dev/sandbox-dallen-9871/demo-olufemi-registry/${{ inputs.DOCKER_IMAGE_NAME }}:rollback-image
          # Push the rollback-image tag
          docker push europe-west2-docker.pkg.dev/sandbox-dallen-9871/demo-olufemi-registry/${{ inputs.DOCKER_IMAGE_NAME }}:rollback-image

      # Step 5: Push the new active-image
      - name: Push New Active-Image
        run: |
          docker push europe-west2-docker.pkg.dev/sandbox-dallen-9871/demo-olufemi-registry/${{ inputs.DOCKER_IMAGE_NAME }}:active-image

      # Step 6: Optionally untag the old rollback image
      # This step requires custom logic to determine and remove the old rollback tag.
      # Docker does not directly support "untagging" in the way Git handles branch deletion.
      # You would typically overwrite the rollback tag with the new rollback as shown above.
      # If you need to clean up old tags, consider implementing a cleanup script that lists and deletes specific tags.
