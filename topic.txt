nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns


 
     

helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb

jobs:
  retag_images:
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate and Configure
        run: |
          echo "${{ secrets.GCLOUD_AUTH }}" | base64 -d > gcloud.json
          gcloud auth activate-service-account --key-file=gcloud.json
          gcloud auth configure-docker ${{ env.REGISTRY_HOST }}
        env:
          GCLOUD_AUTH: ${{ secrets.GCLOUD_AUTH }}

      - name: Tag and Push Images as Rollback
        run: |
          FULL_PATH="${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}"
          DATE_TAG=$(date "+%Y%m%d%H%M%S")
          
          echo "Fetching tags excluding ${{ inputs.DOCKER_IMAGE_TAG }}"
          IFS=$'\n' read -d '' -r -a TAGS < <(gcloud artifacts docker images list "$FULL_PATH" --limit=6 --format='get(tags)' | grep -v "${{ inputs.DOCKER_IMAGE_TAG }}" | head -n 5 && printf '\0')
          
          echo "Tags to process: ${TAGS[@]}"
          
          for TAG in "${TAGS[@]}"; do
            if [[ -n "$TAG" ]]; then
              NEW_TAG="rollback-image-${DATE_TAG}-${TAG}"
              echo "Tagging and pushing: $TAG as $NEW_TAG"

              # Make sure the pull, tag, and push operations are correctly formatted and executed
              docker pull "${FULL_PATH}:${TAG}"
              docker tag "${FULL_PATH}:${TAG}" "${FULL_PATH}:${NEW_TAG}"
              docker push "${FULL_PATH}:${NEW_TAG}"
            else
              echo "No tag found for processing"
            fi
          done
        env:
          REGISTRY_HOST: europe-west2-docker.pkg.dev
          PROJECT_ID: sandbox-dallen-9871
          REPOSITORY: demo-olufemi-registry
          DOCKER_IMAGE_TAG: latest # Example tag to exclude
