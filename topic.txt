nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns


 
     

helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb


      - name: Retag Current Active-Image as Rollback and Manage Old Rollbacks
        run: |
          FULL_IMAGE_NAME="${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}"
          DATE_TAG=$(date +%Y%m%d%H%M%S)
          
          # Tag the current active-image as a new rollback image with the current date and push
          docker tag $FULL_IMAGE_NAME:active-image $FULL_IMAGE_NAME:rollback-image-$DATE_TAG
          docker push $FULL_IMAGE_NAME:rollback-image-$DATE_TAG

          # Fetch all existing tags, prioritize rollback tags, and ensure we only operate on the relevant set
          ALL_TAGS=$(gcloud container images list-tags $FULL_IMAGE_NAME --format='get(tags)' --limit=unlimited | tr ',' '\n' | grep -v '^$')
          ROLLBACK_TAGS=()
          OLD_DEPLOYED_TAGS=()
          
          for TAG in $ALL_TAGS; do
              if [[ "$TAG" =~ rollback-image- ]]; then
                  ROLLBACK_TAGS+=("$TAG")
              elif [[ "$TAG" =~ old-deployed-images- ]]; then
                  OLD_DEPLOYED_TAGS+=("$TAG")
              fi
          done

          # Sort rollback tags to manage the latest 5
          IFS=$'\n' ROLLBACK_TAGS=($(sort -r <<<"${ROLLBACK_TAGS[*]}"))
          unset IFS

          # Process rollback tags: keep top 5 as rollback, rest as old-deployed
          for i in "${!ROLLBACK_TAGS[@]}"; do
              TAG=${ROLLBACK_TAGS[$i]}
              if [ $i -lt 5 ]; then
                  # No action needed for the top 5
                  continue
              else
                  # Re-tag the rest as old-deployed-images
                  OLD_TAG=${TAG#rollback-image-}
                  docker tag $FULL_IMAGE_NAME:$TAG $FULL_IMAGE_NAME:old-deployed-images-$OLD_TAG
                  docker push $FULL_IMAGE_NAME:old-deployed-images-$OLD_TAG
              fi
          done
