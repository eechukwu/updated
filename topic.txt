import subprocess
import json
import sys
import os

# Setup the path to the common directory to import clusters.py
common_dir = os.path.join(os.path.dirname(__file__), '..', 'common')
sys.path.insert(0, os.path.abspath(common_dir))

from clusters import CLUSTERS, switch_context, ANSIColors

# Allocated memory (in GB) for each cluster
ALLOCATED_MEMORY = {
    "non-prod-warehouse": 98,
    "non-prod-ecommerce-internal": 130.66,
    "non-prod-retail": 130.66,
    "non-prod-tech-enablement": 98,
    "non-prod-buying": 98,
    "prod-warehouse": 98,
    "prod-ecommerce-internal": 98,
    "prod-retail": 98,
    "prod-tech-enablement": 98,
    "prod-buying": 98,
    "non-prod-ecom": 262.59,
    "prod-prem": 196.94,
    "prod-sports": 262.59
}

def convert_to_mib(memory_str):
    """
    Converts memory string to MiB.
    """
    if memory_str.endswith('Ki'):
        return int(memory_str[:-2]) / 1024
    elif memory_str.endswith('Mi'):
        return int(memory_str[:-2])
    elif memory_str.endswith('Gi'):
        return int(memory_str[:-2]) * 1024
    elif memory_str.endswith('Ti'):
        return int(memory_str[:-2]) * 1024 * 1024
    else:
        return int(memory_str) / (1024 * 1024)

def get_total_memory_requests():
    """
    Retrieves the total memory requests for all running pods in the current cluster.
    """
    cmd = ['kubectl', 'get', 'pods', '-A', '-o', 'json']
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = proc.communicate()

    if proc.returncode != 0:
        print(f"Error retrieving pod information: {err.decode()}")
        return None

    pods = json.loads(out.decode())
    total_memory_mib = 0

    for pod in pods['items']:
        containers = pod['spec']['containers']
        for container in containers:
            if 'resources' in container and 'requests' in container['resources']:
                if 'memory' in container['resources']['requests']:
                    memory_request = container['resources']['requests']['memory']
                    total_memory_mib += convert_to_mib(memory_request)

    # Convert total MiB to GB
    total_memory_gb = total_memory_mib / 1024
    return total_memory_gb

def monitor_cluster(cluster_name):
    """
    Monitors the total memory requests for the specified cluster and prints a warning if usage is over 85%.
    """
    cluster_info = next((c for c in CLUSTERS if c['name'] == cluster_name), None)
    if not cluster_info:
        print(f"{ANSIColors.RED}Cluster {cluster_name} not found.{ANSIColors.ENDC}")
        return

    if not switch_context(cluster_info):
        return

    total_memory_gb = get_total_memory_requests()
    if total_memory_gb is None:
        return

    allocated_memory_gb = ALLOCATED_MEMORY.get(cluster_name)
    if allocated_memory_gb is None:
        print(f"{ANSIColors.RED}Allocated memory for cluster {cluster_name} not found.{ANSIColors.ENDC}")
        return

    usage_percentage = (total_memory_gb / allocated_memory_gb) * 100

    if usage_percentage > 85:
        print(f"{ANSIColors.RED}Warning: Cluster {cluster_name} is using {usage_percentage:.2f}% of its allocated memory ({total_memory_gb:.2f} GB / {allocated_memory_gb:.2f} GB).{ANSIColors.ENDC}")
    else:
        print(f"{ANSIColors.GREEN}Cluster {cluster_name} is using {usage_percentage:.2f}% of its allocated memory ({total_memory_gb:.2f} GB / {allocated_memory_gb:.2f} GB).{ANSIColors.ENDC}")

if __name__ == "__main__":
    # Monitor all clusters
    for cluster in CLUSTERS:
        monitor_cluster(cluster['name'])
