nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns

Step 1:  Docker build and push to registry with commit SHA tag

Step 2: Fetch the Previous active-image

Step 3: Tag latest image as active-image

Step 4: Retag current 'active-image' as 'rollback-image

Step 5: Untag the old rollback image


  
  
  
  
  
  
  
  
  
  
  
  
  - name: Add IAM policy binding for the current repository
  run: |
    GCP_PROJECT_ID="your-gcp-project-id"
    SERVICE_ACCOUNT_EMAIL="sa-artifact-registry@${GCP_PROJECT_ID}.iam.gserviceaccount.com"
    WORKLOAD_IDENTITY_POOL_ID="github-actions" # Adjust as needed
    REPOSITORY_NAME="frasers-group/${{ github.event.repository.name }}" # Adjust based on your GitHub org/user

    # Formulate the member string for the current GitHub repository
    MEMBER="principalSet://iam.googleapis.com/projects/${GCP_PROJECT_ID}/locations/global/workloadIdentityPools/${WORKLOAD_IDENTITY_POOL_ID}/attribute.repository/${REPOSITORY_NAME}"

    # Add the IAM policy binding to allow the current repository to impersonate the service account
    gcloud iam service-accounts add-iam-policy-binding $SERVICE_ACCOUNT_EMAIL \
      --project=$GCP_PROJECT_ID \
      --role="roles/iam.workloadIdentityUser" \
      --member="$MEMBER"

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
