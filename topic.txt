import subprocess
import json
import sys
import os

# Setup the path to the common directory to import clusters.py
common_dir = os.path.join(os.path.dirname(__file__), '..', 'common')
sys.path.insert(0, os.path.abspath(common_dir))

from clusters import CLUSTERS, switch_context, ANSIColors

# Allocated vCPUs for each cluster (assuming for demonstration purposes)
ALLOCATED_VCPUS = {
    "non-prod-warehouse": 24,
    "non-prod-ecommerce-internal": 32,
    "non-prod-retail": 32,
    "non-prod-tech-enablement": 24,
    "non-prod-buying": 24,
    "prod-warehouse": 24,
    "prod-ecommerce-internal": 24,
    "prod-retail": 24,
    "prod-tech-enablement": 24,
    "prod-buying": 24,
    "non-prod-ecom": 40,
    "prod-prem": 30,
    "prod-sports": 40
}

def get_total_cpu_requests():
    """
    Retrieves the total CPU requests for all running pods in the current cluster.
    """
    cmd = ['kubectl', 'get', 'pods', '-A', '-o', 'json']
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = proc.communicate()

    if proc.returncode != 0:
        print(f"Error retrieving pod information: {err.decode()}")
        return None

    pods = json.loads(out.decode())
    total_cpu_millicores = 0

    for pod in pods['items']:
        containers = pod['spec']['containers']
        for container in containers:
            if 'resources' in container and 'requests' in container['resources']:
                if 'cpu' in container['resources']['requests']:
                    cpu_request = container['resources']['requests']['cpu']
                    # Convert CPU request to millicores (m)
                    if 'm' in cpu_request:
                        total_cpu_millicores += int(cpu_request[:-1])
                    else:
                        total_cpu_millicores += int(cpu_request) * 1000

    # Convert total millicores to vCPUs
    total_vcpus = total_cpu_millicores / 1000
    return total_vcpus

def monitor_cluster(cluster_name):
    """
    Monitors the total CPU requests for the specified cluster and prints a warning if usage is over 85%.
    """
    cluster_info = next((c for c in CLUSTERS if c['name'] == cluster_name), None)
    if not cluster_info:
        print(f"{ANSIColors.RED}Cluster {cluster_name} not found.{ANSIColors.ENDC}")
        return

    if not switch_context(cluster_info):
        return

    total_vcpus = get_total_cpu_requests()
    if total_vcpus is None:
        return

    allocated_vcpus = ALLOCATED_VCPUS.get(cluster_name)
    if allocated_vcpus is None:
        print(f"{ANSIColors.RED}Allocated vCPUs for cluster {cluster_name} not found.{ANSIColors.ENDC}")
        return

    usage_percentage = (total_vcpus / allocated_vcpus) * 100

    if usage_percentage > 85:
        print(f"{ANSIColors.RED}Warning: Cluster {cluster_name} is using {usage_percentage:.2f}% of its allocated vCPUs ({total_vcpus}/{allocated_vcpus}).{ANSIColors.ENDC}")
    else:
        print(f"{ANSIColors.GREEN}Cluster {cluster_name} is using {usage_percentage:.2f}% of its allocated vCPUs ({total_vcpus}/{allocated_vcpus}).{ANSIColors.ENDC}")

if __name__ == "__main__":
    # Monitor all clusters
    for cluster in CLUSTERS:
        monitor_cluster(cluster['name'])
