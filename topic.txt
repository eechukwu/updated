nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns


 
     

helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb


    jobs:
  retag_images:
    runs-on: ubuntu-latest
    steps:
      - name: Tag and Push Images as Rollback
        run: |
          FULL_PATH="${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}"
          DATE_TAG=$(date "+%Y%m%d%H%M%S")
          EXCLUDE_TAG="${{ inputs.DOCKER_IMAGE_TAG }}"

          # Authenticate with gcloud and configure Docker to use as a credential helper
          echo "${{ secrets.GCLOUD_AUTH }}" | gcloud auth activate-service-account --key-file=-
          gcloud auth configure-docker ${{ env.REGISTRY_HOST }}

          # Fetch image tags, excluding the latest push, and get the next 5 for rollback
          echo "Fetching image tags, excluding: $EXCLUDE_TAG"
          IFS=$'\n' READ_TAGS=($(gcloud artifacts docker images list "$FULL_PATH" --limit=6 | grep -v "$EXCLUDE_TAG"))
          unset IFS

          COUNT=0
          for TAG_INFO in "${READ_TAGS[@]}"; do
            if [ $COUNT -lt 5 ]; then
              ORIGINAL_TAG=$(echo "$TAG_INFO" | awk '{print $1}') # Adjust based on actual output
              if [[ "$ORIGINAL_TAG" && "$ORIGINAL_TAG" != "$EXCLUDE_TAG" ]]; then
                NEW_TAG="rollback-image-${DATE_TAG}-${ORIGINAL_TAG//,/}"
                echo "New tag to be pushed: $FULL_PATH:$NEW_TAG"
                
                # Execute Docker commands
                docker pull "$FULL_PATH:$ORIGINAL_TAG"
                docker tag "$FULL_PATH:$ORIGINAL_TAG" "$FULL_PATH:$NEW_TAG"
                docker push "$FULL_PATH:$NEW_TAG"

                ((COUNT++))
              fi
            else
              break
            fi
          done
        env:
          GCLOUD_AUTH: ${{ secrets.GCLOUD_AUTH }}
Error response from daemon: name invalid: Missing image name. Pulls should be of the form docker pull HOST-NAME/PROJECT-ID/REPOSITORY/IMAGE
