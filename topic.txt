nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns
helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb


Creating a visual representation of your CI/CD pipeline in draw.io (now diagrams.net) is a great way to illustrate the process clearly. While I can't directly create or export images in draw.io format or execute draw.io commands, I can guide you on how to represent each step of the CI/CD pipeline you've outlined in a diagrammatic format suitable for draw.io.

How to Create the CI/CD Pipeline Diagram in draw.io:
Start with a Blank Canvas:

Open draw.io and start with a blank canvas.
Use Shapes for Each Step:

For each of the CI/CD steps, use a rectangular shape to represent the action.
Label each rectangle with the step number and name, e.g., "1. Build and Push the Docker Image".
Add Descriptions:

Use text boxes under or above each rectangle to briefly describe what happens in each step.
For example, under the "Build and Push the Docker Image" rectangle, you could add, "Build Docker image and push to GCR/GHCR with unique tag".
Show Progression:

Use arrows to connect the rectangles in order, showing the flow from one step to the next.
Highlight Tools:

Optionally, include icons or small images next to each step to represent the tools used, such as Docker, Kubernetes, or Google Cloud.
Additional Details:

For steps involving decisions or branching (not explicitly mentioned but possible in CI/CD workflows), use diamond shapes to represent decision points.
Finalize and Export:

Once your diagram is complete, review it for accuracy and clarity.
Export your diagram from draw.io in your preferred format (e.g., PNG, JPEG) to include it in your Confluence documentation.
Example Diagram Structure:
Rectangle 1: "1. Build and Push the Docker Image"
Description: "Docker build and push to registry with commit SHA tag".
Rectangle 2: "2. Tag the New Image as active-image"
Description: "Tag latest image as 'active-image'".
Rectangle 3: "3. Fetch and Preserve the Previous active-image Tag"
Description: "Retag current 'active-image' as 'old-active-image-<date>'".
Rectangle 4: "4. Update Kustomize Configuration"
Description: "Update kustomization.yaml to use 'active-image'".
Rectangle 5: "5. Deploy to GKE"
Description: "Apply Kustomize config to GKE clusters".
This approach will help you create a clear and informative CI/CD pipeline diagram in draw.io, which can then be easily shared or included in your Confluence documentation.

