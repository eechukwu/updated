nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns


 
     

helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb


           - name: Retag Current Active-Image as Rollback and Manage Old Rollbacks
        run: |
          FULL_IMAGE_NAME="${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}"
          DATE_TAG=$(date +%Y%m%d%H%M%S)

          # Fetch all tags from the registry excluding the latest build
          ALL_TAGS=$(gcloud container images list-tags $FULL_IMAGE_NAME --format='value(tags)' --limit=unlimited | tr ',' '\n' | grep -v 'latest' | sort -r)

          # Arrays to hold the tags
          ROLLBACK_TAGS=()
          OLD_ROLLBACK_TAGS=()

          # Process each tag
          COUNT=0
          for TAG in $ALL_TAGS; do
              # Only process tags that are not 'active-image' or already processed rollback/old-rollback tags
              if [[ ! "$TAG" =~ active-image ]] && [[ ! "$TAG" =~ rollback-image- ]] && [[ ! "$TAG" =~ old-rollback-image- ]]; then
                  if [ $COUNT -lt 5 ]; then
                      # These will be the new rollback tags
                      ROLLBACK_TAGS+=("$TAG")
                  else
                      # These will be tagged as old-rollback-image
                      OLD_ROLLBACK_TAGS+=("$TAG")
                  fi
                  let COUNT++
              fi
          done

          # Tag the last 5 (excluding the latest) as rollback-image-date
          for TAG in "${ROLLBACK_TAGS[@]}"; do
              docker tag $FULL_IMAGE_NAME:$TAG $FULL_IMAGE_NAME:rollback-image-$DATE_TAG-$TAG
              docker push $FULL_IMAGE_NAME:rollback-image-$DATE_TAG-$TAG
          done

          # Tag any beyond the top 5 as old-rollback-image-date
          for TAG in "${OLD_ROLLBACK_TAGS[@]}"; do
              docker tag $FULL_IMAGE_NAME:$TAG $FULL_IMAGE_NAME:old-rollback-image-$DATE_TAG-$TAG
              docker push $FULL_IMAGE_NAME:old-rollback-image-$DATE_TAG-$TAG
          done
