nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns
helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb
helm list -A

ion, here it's SQS
  endpoint  = module.sqs.sqs_topic_arn  # Endpoint ARN for the SQS queue
}


Variables would be my go-to.




variable "create_subscription" {
  description = "Set to true to create the SNS topic subscription"
  type        = bool
  default     = false # Set this to false since the SNS topic does not exist
}

# SNS Topic Subscription Resource
resource "aws_sns_topic_subscription" "trusted_ledger_sqs_target" {
  count     = var.create_subscription ? 1 : 0
  topic_arn = "arn:aws:sns:your-region:${var.deploy_environment_id}:${var.sns_topic_name}"
  protocol  = "sqs"
  endpoint  = module.sqs.sqs_topic_arn
}

 # The `deploy_context` and `deploy_environment_id` variables are reserved for use by the deploy service itself
# See https://github.com/fanduel/infrastructure-deploy/blob/master/docs/workflows/project-specific-infrastructure/README.md#deploy-workflow
# for it's purpose and interface.
variable "deploy_context" {}
variable "deploy_environment_id" {}
variable "environment" {}
variable "deploy_environment" {}
variable "sns_kms_policy_roles" {}
variable "delay_seconds" {}
variable "trusted_ledger_sqs_target_subscription" {
  description = "Set to true to create the SNS topic subscription"
  type        = bool
  default     = false # Set this to false since the SNS topic does not exist
}

locals {
  project_name = "auto-tran-with-lambda"
  product      = "aw"
  origin_uri   = "https://github.com/fanduel/auto-transition-withdrawals-lambda/tree/main/infrastructure"

  # We run TF from from infrastructure/
  root_dir                     = "../"
  region                       = "us-east-1"
  project_resource_name_hyphen = "${local.project_name}-${var.deploy_context}"
  devstack_prefix              = var.devstack_name != "" ? format("devstack-%s-", var.devstack_name) : format("%s-", var.environment)
  trust_score_context          = var.devstack_name != "" ? format("devstack-%s-", var.devstack_name) : format("%s-", var.deploy_environment)
}

module "kms" {
  source             = "./modules/kms"
  deploy_environment = var.deploy_environment
  account_id         = var.deploy_environment_id
  key_name           = "${var.deploy_environment}_auto_trans_sns_topic"
  key_description    = "This key is used for encryption of the auto transition sns topic"
  policy_roles       = var.sns_kms_policy_roles
}

module "sqs" {
  source              = "./modules/sqs"
  account_id          = var.deploy_environment_id
  deploy_environment  = var.deploy_environment
  environment         = var.environment
  devstack_name       = local.devstack_prefix
  delay_seconds       = var.delay_seconds
  trust_score_context = local.trust_score_context
}

module "sns" {
  source             = "./modules/sns"
  account_id         = var.deploy_environment_id
  deploy_environment = var.deploy_environment
  environment        = var.environment
  devstack_name      = local.devstack_prefix
  kms_encryption_key_arn = module.kms.auto_trans_kms_arn
}

# Event source from SQS
resource "aws_lambda_event_source_mapping" "sqs" {
  event_source_arn = module.sqs.sqs_topic_arn
  function_name    = aws_lambda_function.atwl.arn
  enabled          = var.sqs_event_source_enabled
}

resource "aws_sns_topic_subscription" "trusted_ledger_sqs_target" {
  count     = var.trusted_ledger_sqs_target_subscription ? 1 : 0
  topic_arn = "arn:aws:sns:us-east-1:${var.deploy_environment_id}:${local.trust_score_context}payments-user-trust-score-trusted-sns"
  protocol  = "sqs"
  endpoint  = module.sqs.sqs_topic_arn
}

moved {
  from = aws_sns_topic_subscription.trusted_ledger_sqs_target[0]
  to = aws_sns_topic_subscription.trusted_ledger_sqs_target
}


 # aws_sns_topic_subscription.trusted_ledger_sqs_target[0] will be destroyed
  # (because index [0] is out of range for count)
  # (moved from aws_sns_topic_subscription.trusted_ledger_sqs_target)
  - resource "aws_sns_topic_subscription" "trusted_ledger_sqs_target" {
      - arn                             = "arn:aws:sns:us-east-1:952224021780:devstack-uscentral1-payments-user-trust-score-trusted-sns:eb048756-0058-4aa0-b3fe-38ffe5420be2" -> null
      - confirmation_timeout_in_minutes = 1 -> null
      - confirmation_was_authenticated  = true -> null
      - endpoint                        = "arn:aws:sqs:us-east-1:952224021780:devstack-uscentral1-auto-transition-withdrawal-queue" -> null
      - endpoint_auto_confirms          = false -> null
      - id                              = "arn:aws:sns:us-east-1:952224021780:devstack-uscentral1-payments-user-trust-score-trusted-sns:eb048756-0058-4aa0-b3fe-38ffe5420be2" -> null
      - owner_id                        = "952224021780" -> null
      - pending_confirmation            = false -> null
      - protocol                        = "sqs" -> null
      - raw_message_delivery            = false -> null
      - topic_arn                       = "arn:aws:sns:us-east-1:952224021780:devstack-uscentral1-payments-user-trust-score-trusted-sns" -> null
    }

.
├── CONTRIBUTING.md
├── Dockerfile
├── Makefile
├── README.md
├── catalog-info.yaml
├── infrastructure
│   ├── deploy-service.yaml
│   ├── lambda.tf
│   ├── main.tf
│   ├── modules
│   │   ├── kms
│   │   │   ├── main.tf
│   │   │   ├── output.tf
│   │   │   └── variables.tf
│   │   ├── sns
│   │   │   ├── main.tf
│   │   │   ├── output.tf
│   │   │   └── variables.tf
│   │   └── sqs
│   │       ├── main.tf
│   │       ├── output.tf
│   │       └── variables.tf
│   ├── variables
│   │   ├── awdevelopment.tfvars
│   │   ├── awproductionca.tfvars
│   │   ├── development.tfvars
│   │   ├── perftest.tfvars
│   │   └── usdfs.tfvars
│   └── variables.tf
├── pyproject.toml
├── pytest.ini
