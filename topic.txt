data "google_project" "this" {}

resource "google_service_account" "this" {
  account_id   = "${var.app_name}-gh"
  display_name = "${var.app_name}-github-actions-access"
  description  = "This service account is used for GitHub Actions to access GCP secrets beginning with ${var.app_name}"
}

resource "google_service_account_iam_member" "this" {
  for_each           = toset(var.repositories)
  service_account_id = google_service_account.this.id
  role               = "roles/iam.workloadIdentityUser"
  member             = "principalSet://iam.googleapis.com/projects/${data.google_project.this.number}/locations/global/workloadIdentityPools/${var.identity_pool_name}/attribute.repository/frasers-group/${each.key}"
}

resource "google_project_iam_member" "project" {
  project = data.google_project.this.project_id
  role    = "roles/secretmanager.secretAccessor"
  member  = "serviceAccount:${google_service_account.this.email}"

  condition {
    title       = "secret_begins_${var.app_name}"
    description = "Access to secrets prefixed with '${var.app_name}'"
    expression  = "resource.type == 'secretmanager.googleapis.com/SecretVersion' && resource.name.startsWith('projects/${data.google_project.this.number}/secrets/${var.app_name}')"
  }
}

output "service_account_email" {
  value = google_service_account.this.email
}

terraform {

  required_version = "~> 1.3"

  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 4.43"
    }
  }
}

variable "app_name" {
  description = "The namespace prefix used for accessing secrets, i.e \"frasers-example-app\" "
  type        = string
}

variable "repositories" {
  type        = list(any)
  description = "List of strings containing the repostiory names you wish to access the secrets prefixed with the app namespace"
}

variable "identity_pool_name" {
  type        = string
  default     = "github-actions"
  description = "Name of the workload identity pool"
}

locals {
  k8s_gcp_secrets = concat(
    local.buying_secrets,
    local.ecom_internal_secrets,
    local.retail_secrets,
    local.tech_enablement_secrets,
    local.warehouse_secrets,
    local.common_secrets
  )
}

module "k8s_gcp_secret" {
  source = "../modules/gcp_secret"

  for_each = { for item in local.k8s_gcp_secrets : "${item.secret_name}-${item.namespace}" => item }

  secret_name = "${each.value.namespace}-${each.value.secret_name}"
  labels   = { "namespace" = each.value.namespace }
}

module "github_actions_gcp_secret" {
  source = "../modules/gcp_secret"

  for_each = { for item in local.github_actions_gcp_secrets : "${item.app_name}-${item.secret_name}" => item }

  secret_name = each.key
  labels   = { "app_name" = each.value.app_name }
}

module "github_actions_secret_access" {
  source = "../modules/github_actions_gcp_secret_access"

  for_each = { for item in local.github_actions_gcp_secrets_access : item.app_name => item }

  app_name           = each.value.app_name
  identity_pool_name = each.value.identity_pool_name
  repositories       = each.value.repositories
}

output "github_actions_service_accounts" {
  value = [for sa in module.github_actions_secret_access : sa.service_account_email]
}


  
  
  
  
  
  
  
  
  
  
  
  
  - name: Add IAM policy binding for the current repository
  run: |
    GCP_PROJECT_ID="your-gcp-project-id"
    SERVICE_ACCOUNT_EMAIL="sa-artifact-registry@${GCP_PROJECT_ID}.iam.gserviceaccount.com"
    WORKLOAD_IDENTITY_POOL_ID="github-actions" # Adjust as needed
    REPOSITORY_NAME="frasers-group/${{ github.event.repository.name }}" # Adjust based on your GitHub org/user

    # Formulate the member string for the current GitHub repository
    MEMBER="principalSet://iam.googleapis.com/projects/${GCP_PROJECT_ID}/locations/global/workloadIdentityPools/${WORKLOAD_IDENTITY_POOL_ID}/attribute.repository/${REPOSITORY_NAME}"

    # Add the IAM policy binding to allow the current repository to impersonate the service account
    gcloud iam service-accounts add-iam-policy-binding $SERVICE_ACCOUNT_EMAIL \
      --project=$GCP_PROJECT_ID \
      --role="roles/iam.workloadIdentityUser" \
      --member="$MEMBER"

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
