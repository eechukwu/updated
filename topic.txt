Here is the complete policy YAML with the specified changes:

### Policy YAML

```yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sBlockAllIngress
metadata:
  name: block-all-ingress-and-gateway
spec:
  enforcementAction: dryrun
  match:
    kinds: []
    namespaces:
      - "*"
    excludedNamespaces:
      - "gateway"  # Exclude the 'gateway' namespace from the policy
  parameters:
    allowList:
      - "external-gateway"  # Allow specific gateway
```

### Detailed Comments

- **apiVersion**: Specifies the API version for the constraint template.
- **kind**: Specifies the type of constraint template, `K8sBlockAllIngress`.
- **metadata**: Contains metadata, including the name of the constraint.
- **spec**: Defines the specification of the constraint.
  - **enforcementAction**: Set to `dryrun` to enable audit mode.
  - **match**: Defines the resources the constraint applies to.
    - **kinds**: An empty list to apply the constraint to all kinds.
    - **namespaces**: Specifies that the constraint applies to all namespaces.
    - **excludedNamespaces**: Specifies that the constraint does not apply to the `gateway` namespace.
  - **parameters**: Additional parameters for the constraint.
    - **allowList**: Lists the names of Ingress and Gateway resources exempt from the constraint (`external-gateway`).

### Applying the YAML File

Apply the YAML file to your cluster:

```sh
kubectl apply -f block-all-ingress-and-gateway.yaml
```

### Testing the Policy

**Non-Compliant Ingress Example (`non-compliant-ingress.yaml`):**

```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-ingress
  namespace: default
spec:
  rules:
    - host: example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: example-service
                port:
                  number: 80
```

**Non-Compliant Gateway Example (`non-compliant-gateway.yaml`):**

```yaml
apiVersion: gateway.networking.k8s.io/v1alpha2
kind: Gateway
metadata:
  name: test-gateway
  namespace: default
spec:
  gatewayClassName: example-gateway-class
  listeners:
    - name: http
      port: 80
      protocol: HTTP
      routes:
        kind: HTTPRoute
        selector:
          matchLabels:
            app: example
```

**Compliant Gateway Example (`compliant-gateway.yaml`):**

```yaml
apiVersion: gateway.networking.k8s.io/v1alpha2
kind: Gateway
metadata:
  name: external-gateway
  namespace: default
spec:
  gatewayClassName: example-gateway-class
  listeners:
    - name: http
      port: 80
      protocol: HTTP
      routes:
        kind: HTTPRoute
        selector:
          matchLabels:
            app: example
```

### Command to List All Constraint Templates

```sh
kubectl get constrainttemplates
```

### Applying and Testing the Policy

1. **Apply the policy**:

    ```sh
    kubectl apply -f block-all-ingress-and-gateway.yaml
    ```

2. **Test the policy with non-compliant resources**:

    ```sh
    kubectl apply -f non-compliant-ingress.yaml
    kubectl apply -f non-compliant-gateway.yaml
    ```

    These should be denied due to the constraint.

3. **Test the policy with compliant resources**:

    ```sh
    kubectl apply -f compliant-gateway.yaml
    ```

    This should be allowed due to the allow list exemption.
