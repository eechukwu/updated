nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns
helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb
helm list -A



Create Google Artifact via terraform:

resource "google_artifact_registry_repository" "my_repository" {
  provider      = google
  location      = "<YOUR-REGION>"
  repository_id = "my-artifact-repo"
  description   = "My artifact repository"
  format        = "DOCKER"

  labels = {
    env = "test"
  }
}


# Step 2: Authenticate with GitHub Packages
# Replace YOUR_GITHUB_PAT with your GitHub Personal Access Token
# Replace YOUR_GITHUB_USERNAME with your GitHub username
echo "YOUR_GITHUB_PAT" | docker login ghcr.io -u YOUR_GITHUB_USERNAME --password-stdin

# Step 3: Pull the Docker Image from GitHub Packages
# Replace YOUR_GITHUB_USERNAME with your GitHub username
docker pull ghcr.io/YOUR_GITHUB_USERNAME/example-image:latest

# Step 4: Authenticate with Google Artifact Registry
# Configure Docker to authenticate with your Google Cloud project's Artifact Registry
# Replace [REGION] with the Google Cloud region where you want to host your Artifact Registry repository
gcloud auth configure-docker [REGION]-docker.pkg.dev

# Step 5: Tag Your Docker Image for Google Artifact Registry
# Replace:
# - [REGION] with your Google Cloud region
# - YOUR_PROJECT_ID with your Google Cloud project ID
# - YOUR_ARTIFACT_REGISTRY_REPOSITORY with the name of your Artifact Registry repository
docker tag ghcr.io/YOUR_GITHUB_USERNAME/example-image:latest [REGION]-docker.pkg.dev/YOUR_PROJECT_ID/YOUR_ARTIFACT_REGISTRY_REPOSITORY/example-image:latest

# Step 6: Push the Docker Image to Google Artifact Registry
docker push [REGION]-docker.pkg.dev/YOUR_PROJECT_ID/YOUR_ARTIFACT_REGISTRY_REPOSITORY/example-image:latest

# After running these commands, verify the image has been successfully pushed
# to your Google Artifact Registry by checking the Google Cloud Console.



################# Bash Script to Pull and upload the images ###########################

#!/bin/bash

# Configuration variables
GITHUB_USERNAME="YOUR_GITHUB_USERNAME"
GITHUB_PAT="YOUR_GITHUB_PAT"
GCP_REGION="[REGION]"
GCP_PROJECT_ID="YOUR_PROJECT_ID"
ARTIFACT_REGISTRY_REPOSITORY="YOUR_ARTIFACT_REGISTRY_REPOSITORY"

# Authenticate with GitHub Packages
echo "Authenticating with GitHub Packages..."
echo "$GITHUB_PAT" | docker login ghcr.io -u "$GITHUB_USERNAME" --password-stdin

# Authenticate with Google Artifact Registry
echo "Authenticating with Google Artifact Registry..."
gcloud auth configure-docker "$GCP_REGION"-docker.pkg.dev

# Function to migrate a single image
migrate_image() {
    local image_name=$1
    local tag=$2

    # Pull the image from GitHub Packages
    echo "Pulling $image_name:$tag from GitHub Packages..."
    docker pull ghcr.io/"$GITHUB_USERNAME"/"$image_name":"$tag"

    # Tag the image for Google Artifact Registry
    echo "Tagging the image for Google Artifact Registry..."
    docker tag ghcr.io/"$GITHUB_USERNAME"/"$image_name":"$tag" "$GCP_REGION"-docker.pkg.dev/"$GCP_PROJECT_ID"/"$ARTIFACT_REGISTRY_REPOSITORY"/"$image_name":"$tag"

    # Push the image to Google Artifact Registry
    echo "Pushing the image to Google Artifact Registry..."
    docker push "$GCP_REGION"-docker.pkg.dev/"$GCP_PROJECT_ID"/"$ARTIFACT_REGISTRY_REPOSITORY"/"$image_name":"$tag"
}

# Read each line in images.txt and migrate
while IFS=: read -r image_name tag; do
    migrate_image "$image_name" "$tag"
done < images.txt

echo "Migration completed."
