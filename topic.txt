nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns
helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb
helm list -A

Below is a simplified comparison table of some key features and considerations for Docker Hub, Google Container Registry (GCR), Amazon Elastic Container Registry (ECR), Microsoft Azure Container Registry (ACR), and GitHub Packages. Please note that specifics can change, so it's a good idea to check each service's current documentation for the latest details.

| Feature/Registry                  | Docker Hub | Google Container Registry (GCR) | Amazon Elastic Container Registry (ECR) | Microsoft Azure Container Registry (ACR) | GitHub Packages |
|-----------------------------------|------------|---------------------------------|-----------------------------------------|------------------------------------------|-----------------|
| **Hosting Type**                  | Public     | Public/Private                  | Private                                 | Private                                  | Public/Private  |
| **Integration**                   | Wide       | Google Cloud                    | AWS                                     | Azure                                    | GitHub CI/CD    |
| **Image Vulnerability Scanning**  | Yes        | Yes                             | Yes                                     | Yes                                      | Yes             |
| **Automated Builds**              | Yes        | No                              | No                                      | Yes                                      | Yes             |
| **Geographic Replication**        | No         | Yes                             | Yes (via AWS services)                  | Yes                                      | No              |
| **SLA Availability**              | No         | Yes                             | Yes                                     | Yes                                      | No              |
| **Free Private Repositories**     | No         | No                              | No                                      | No                                       | Yes (Limited)   |
| **Pricing**                       | Free tier + Paid plans | Based on usage               | Based on usage                          | Based on usage                           | Free for public repos, Paid for private |

### Key Points:
- **Hosting Type**: Indicates whether the registry is primarily public (anyone can pull images), private (restricted access), or supports both.
- **Integration**: Shows the cloud or platform services with which the registry has native integrations.
- **Image Vulnerability Scanning**: Whether the service provides tools to scan container images for vulnerabilities.
- **Automated Builds**: Support for automatically building container images from source code.
- **Geographic Replication**: Whether the registry supports distributing images across different geographic regions for faster access.
- **SLA Availability**: If the service offers a Service Level Agreement (SLA) for availability.
- **Free Private Repositories**: Indicates the availability of free private repositories for storing images.
- **Pricing**: General approach to pricing for the use of registry services.

This table is a starting point for comparison. Each project's specific needs can make one service more appealing than another. Always refer to the latest documentation for each service for the most current features and pricing information.


Since we're already hosting most of our apps on GCP, we'll stick with it. But let's make sure to check their SLA, SLO, and SLI details to know what to expect.

After looking at different options, we've decided to go with Google Container Registry (GCP) because we already use it for many of our apps, and it works well for what we need. Now, we'll take a closer look at what GCP promises us about their service to make sure it's the right choice for us.

Moving forward, we will delve deeper into GCP's Service Level Agreements, Objectives, and Indicators to ensure they meet our standards for service quality and reliability.




