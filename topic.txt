nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns


 
     

helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb


- name: Fetch and Process Image Tags for Rollback
  run: |
    FULL_IMAGE_NAME="${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}"
    EXCLUDE_TAG="${{ inputs.DOCKER_IMAGE_TAG }}"

    # Authenticate with gcloud if not already done
    echo "${{ secrets.GCLOUD_AUTH }}" | gcloud auth activate-service-account --key-file=-
    gcloud auth configure-docker ${{ env.REGISTRY_HOST }},gcr.io

    # Fetch image tags, aiming to exclude the latest tag
    # Note: This command needs to be adjusted if --format='value(tags)' does not work as expected
    # You might need to parse the output differently
    echo "Fetching image tags, excluding: $EXCLUDE_TAG"
    IFS=$'\n' READ_TAGS=($(gcloud artifacts docker images list $FULL_IMAGE_NAME --limit=6 | grep -v "$EXCLUDE_TAG"))
    unset IFS

    # Assuming READ_TAGS now contains lines of output from the gcloud command
    # Adjust the parsing logic based on how these lines present the tags
    TAGS=()
    for line in "${READ_TAGS[@]}"; do
      # Extract the tag from each line - adjust this based on the actual line format
      # This is a placeholder logic, assuming the first word in each line is the tag
      TAG=$(echo "$line" | awk '{print $1}')
      if [[ "$TAG" && "$TAG" != "$EXCLUDE_TAG" ]]; then
        TAGS+=("$TAG")
      fi
    done

    # Debug: Print the tags to verify correct extraction
    echo "Processed tags for rollback:"
    printf '%s\n' "${TAGS[@]}"

