nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns


jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Define environment variables for the job
      env:
        REGISTRY_HOST: europe-west2-docker.pkg.dev
        PROJECT_ID: sandbox-dallen-9871
        REPOSITORY: demo-olufemi-registry
        IMAGE_NAME: ${{ inputs.DOCKER_IMAGE_NAME }}

      # Step 1: Docker build and push to registry with commit SHA tag
      - id: build_image
        name: Build Image
        uses: docker/build-push-action@v2
        with:
          push: false
          load: true
          file: ${{ inputs.DOCKERFILE_PATH }}
          context: ${{ inputs.BUILD_CONTEXT }}
          tags: |
             ${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ inputs.DOCKER_IMAGE_TAG }}
          secrets: |
            "github_token=${{ secrets.GITHUB_TOKEN }}"

      # Step 2: Push Image to Google Artifact Registry
      - name: Push Latest Image to Google Artifact Registry
        run: |
          docker push ${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ inputs.DOCKER_IMAGE_TAG }}

      # Step 3: Fetch the Previous active-image
      - id: fetch_previous_active_image
        name: Fetch the Previous active-image
        run: |
          docker pull ${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:active-image

      # Step 4: Tag latest image as active-image
      - name: Tag Latest Image as active-image
        run: |
          docker tag ${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ inputs.DOCKER_IMAGE_TAG }} ${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:active-image
          docker push ${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:active-image

      # New Step 5: Retag current 'active-image' as 'rollback-image' and manage old rollbacks
      - name: Retag Current Active-Image as Rollback and Manage Old Rollbacks
        run: |
          FULL_IMAGE_NAME="${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}"
          DATE_TAG=$(date +%Y%m%d%H%M%S)
          
          # Immediately tag the current active-image as a new rollback image with the current date and push
          docker tag $FULL_IMAGE_NAME:active-image $FULL_IMAGE_NAME:rollback-image-$DATE_TAG
          docker push $FULL_IMAGE_NAME:rollback-image-$DATE_TAG

          # Fetch all existing rollback tags to manage them, now including the one just created
          ROLLBACK_TAGS=$(gcloud container images list-tags $FULL_IMAGE_NAME --filter="tags:rollback-image-*" --format="get(tags)" --limit=unlimited | sort -r | tr ',' '\n' | grep rollback-image-)
          COUNT=1 # Start count at 1 considering we've just added a new rollback image

          for TAG in $ROLLBACK_TAGS; do
              # Skip processing for the first 5 images including the one just tagged
              if [ $COUNT -le 5 ]; then
                  let COUNT++
                  continue
              else
                  # Beyond the 5th rollback image, re-tag with old-deployed-images prefix
                  OLD_TAG=${TAG#rollback-image-}
                  docker tag $FULL_IMAGE_NAME:$TAG $FULL_IMAGE_NAME:old-deployed-images-$OLD_TAG
                  docker push $FULL_IMAGE_NAME:old-deployed-images-$OLD_TAG

                  # Optionally, remove the old rollback tag from the registry if desired
                  # gcloud container images untag $FULL_IMAGE_NAME:$TAG
              fi
          done

helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb


