nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns


 
     
name: Update kustomize manifests
# This workflow will update kustomize manifests to use the provided image digest
# Since generally it is required to push changes to a protected branch you must
# provide information to allow the github action to obtain it's github app creds

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        description: The name of the environment for which to update the manifests
        type: string
        required: true
      IMAGE-DIGEST:
        description: The image digest to be added to the manifests
        type: string
        required: true
      IMAGE-TAG:
        description: The image tag to be added to the manifests
        type: string
        required: false
        default: ${{ github.SHA }}
      KUSTOMIZATION-PATH:
        description: The path to the directory containing the kustomization file, e.g. manifests/overlays/dev
        type: string
        required: true
      BRANCH:
        description: The branch to checkout and use to update the kustomize manifests
        type: string
        default: main
        required: false
      PROJECT_NUMBER:
        description: The GCP project number
        type: string
        default: 1085205753965
        required: false
      PROJECT_ID:
        description: The GCP project ID
        type: string
        default: corp-test-mgmt-anthos-3578
        required: false
      SERVICE_ACCOUNT_PREFIX:
          description: The prefix of the service account, i.e wh-argo
          type: string
          required: true
      K8S_REPO:
        description: The repository containing the kustomize files to commit back to
        type: string
        required: false
        default: ${{ github.REPOSITORY }}
      K8S_CLUSTER_NAME:
        description: The name of the cluster where the application will be deployed to.
        type: string
        default: ''
        required: false
      ARGO_APPLICATION_NAME:
        description: The name of the argo application
        type: string
        required: false
        default: ''


permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    
    steps:
      - name: Authenticate with GCP
        id: gcp-auth
        uses: google-github-actions/auth@35b0e87d162680511bf346c299f71c9c5c379033  # v1.1.1
        with:
          workload_identity_provider: 'projects/${{ inputs.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions/providers/github-actions'
          service_account: '${{ inputs.SERVICE_ACCOUNT_PREFIX }}-gh@${{ inputs.PROJECT_ID }}.iam.gserviceaccount.com'

      - name: Obtain GitHub App information
        id: obtain-secrets
        uses: google-github-actions/get-secretmanager-secrets@4d6d3dfd94110800dda8d84109cb6da0f6a5919d  # v1.0.1
        with:
          secrets: |-
            github-app-id:${{ inputs.PROJECT_ID }}/${{ inputs.SERVICE_ACCOUNT_PREFIX }}-github-app-id
            github-app-installation-id:${{ inputs.PROJECT_ID }}/${{ inputs.SERVICE_ACCOUNT_PREFIX }}-github-app-installation-id
            github-app-private-key:${{ inputs.PROJECT_ID }}/${{ inputs.SERVICE_ACCOUNT_PREFIX }}-github-app-private-key

      - name: Retrieve app token
        id: get-app-token
        uses: frasers-group/ec-fx-github-action-get-token-action-devops@804a73d26e4262e8248db95527b24e5456f8295e
        with:
          app-id: '${{ steps.obtain-secrets.outputs.github-app-id }}'
          private-key: '${{ steps.obtain-secrets.outputs.github-app-private-key }}'
          installation-id: '${{ steps.obtain-secrets.outputs.github-app-installation-id }}'

      - name: Check out code
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab  # v3.5.2
        with:
          token: ${{ steps.get-app-token.outputs.app-token }}
          ref: ${{ inputs.BRANCH }}
          repository: ${{ inputs.K8S_REPO }}

      - name: Update manifests
        run: |
          yq e -i '.images[0].digest = "${{ inputs.IMAGE-DIGEST }}"' ${{ inputs.KUSTOMIZATION-PATH }}/kustomization.yaml
          yq e -i '.images[0].newTag = "${{ inputs.IMAGE-TAG }}"' ${{ inputs.KUSTOMIZATION-PATH }}/kustomization.yaml
        
      - name: Push changes
        env:
          FILE_TO_COMMIT: "${{ inputs.KUSTOMIZATION-PATH }}/kustomization.yaml"
          DESTINATION_BRANCH: ${{ inputs.BRANCH }}
          GITHUB_TOKEN: ${{ steps.get-app-token.outputs.app-token }}
        run: |
          export MESSAGE="Updated ${{ inputs.ENVIRONMENT }} with new image digest: ${{ inputs.IMAGE-DIGEST }}"
          export SHA=$( git rev-parse "$DESTINATION_BRANCH":"$FILE_TO_COMMIT" )
          export CONTENT=$( base64 -i "$FILE_TO_COMMIT" )
          gh api --method PUT /repos/:owner/:repo/contents/"$FILE_TO_COMMIT" \
            --field message="$MESSAGE" \
            --field content="$CONTENT" \
            --field encoding="base64" \
            --field branch="$DESTINATION_BRANCH" \
            --field sha="$SHA"

  argo-sync:
    if: inputs.ARGO_APPLICATION_NAME != ''
    needs: deploy
    uses: frasers-group/te-reusable-workflows-devops/.github/workflows/cd-anthos-argo-sync.yml@main
    with:
      PROJECT_NUMBER: ${{ inputs.PROJECT_NUMBER }}
      PROJECT_ID: ${{ inputs.PROJECT_ID }}
      K8S_CLUSTER_NAME: ${{ inputs.K8S_CLUSTER_NAME }}
      ARGO_APPLICATION_NAME: ${{ inputs.ARGO_APPLICATION_NAME }}

name: Build and deploy application
on: 
  push:
    branches:
      - main
    paths-ignore:
      - "k8s/**" # This workflow MUST NOT trigger when changes are made to the kubernetes manifests folder
      - "**/kustomization.yaml"
      - ".github/workflows/**"

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-and-push:
   uses: frasers-group/te-reusable-workflows-devops/.github/workflows/build-and-push-container-registry.yml@main
   with:
     DOCKER_IMAGE_NAME: wh-reform-api
     DOCKER_IMAGE_TAG: ${{ github.sha }}
     DOCKERFILE_PATH: ./Dockerfile
  deploy-to-dev:
    name: Deploy to dev
    needs: 
      - build-and-push
    uses: frasers-group/te-reusable-workflows-devops/.github/workflows/cd-anthos-gcp-secrets.yml@main
    with:
      environment: dev # this should match the name of the Github environment to deploy to
      image-digest: ${{ needs.build-and-push.outputs.IMAGE_DIGEST }}
      kustomization-path: k8s/overlays/dev # append the name of the environment specific overlays folder
      branch: main # set to the branch which is being synced to ArgoCD
      service_account_prefix: wh-argo # SA to obtain GCP secrets for Github App
  
  deploy-to-test:
      name: Deploy to test
      needs: 
      - build-and-push
      - deploy-to-dev
      uses: frasers-group/te-reusable-workflows-devops/.github/workflows/cd-anthos-gcp-secrets.yml@main
      with:
        environment: test # this should match the name of the Github environment to deploy to
        image-digest: ${{ needs.build-and-push.outputs.IMAGE_DIGEST }}
        kustomization-path: k8s/overlays/test # add path to the folder containing the kustomize environment specific overlays folder
        branch: main # set to the branch which is being synced to ArgoCD
        service_account_prefix: wh-argo # SA to obtain GCP secrets for Github App

  deploy-to-prod:
      name: Deploy to prod
      needs: 
        - build-and-push
        - deploy-to-test
      uses: frasers-group/te-reusable-workflows-devops/.github/workflows/cd-anthos-gcp-secrets.yml@main 
      with:
        environment: prod # this should match the name of the Github environment to deploy to
        image-digest: ${{ needs.build-and-push.outputs.IMAGE_DIGEST }}
        kustomization-path: k8s/overlays/prod # append the name of the environment specific overlays folder
        branch: main # set to the branch which is being synced to ArgoCD
        service_account_prefix: wh-argo # SA to obtain GCP secrets for Github App
