nano ~/.kube/config
kubectl config view
kubectl cluster-info
kubectl config current-context
kubectl config get-contexts
kubectl config use-context gke_${DEVSHELL_PROJECT_ID}_us-central1_autopilot-cluster-1

Pods Commands
kubectl exec -it new-nginx -- /bin/bash
kubectl port-forward new-nginx 10081:80
curl http://127.0.0.1:10081/test.html
source <(kubectl completion bash)
kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


https://docs.honeycomb.io/manage-data-volume/refinery/set-up/


sudo apt-get update
sudo apt-get install apt-transport-https gnupg lsb-release
curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


gcloud config set project corp-test-mgmt-anthos-3578
gcloud container fleet memberships get-credentials non-prod-ecommerce-internal
helm repo add honeycomb https://honeycombio.github.io/helm-charts
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb/refinery
helm repo update refinery honeycomb
helm repo update honeycomb
helm repo update
helm list -A
helm search repo honeycomb
helm install honeycomb-refinery honeycomb/refinery --namespace honeycomb
kubectl create namespace honeycomb
kubectl get ns
helm install refinery honeycomb/refinery --namespace honeycomb
helm uninstall honeycomb-refinery --namespace honeycomb
helm list -A

Due to the dependency issue we encountered, we have made the following changes to deploy into the Canada Account:

In main.tf:

Added a variable:

hcl
Copy code
variable "trusted_ledger_sqs_target_subscription" {
  description = "Set to true to create the SNS topic subscription"
  type        = bool
  default     = true
}
Added a moved block to retain the state file:

hcl
Copy code
moved {
  from = aws_sns_topic_subscription.trusted_ledger_sqs_target
  to   = aws_sns_topic_subscription.trusted_ledger_sqs_target[0]
}
Modified the aws_sns_topic_subscription.trusted_ledger_sqs_target resource to include a condition:

hcl
Copy code
resource "aws_sns_topic_subscription" "trusted_ledger_sqs_target" {
  count     = var.trusted_ledger_sqs_target_subscription ? 1 : 0
  topic_arn = "arn:aws:sns:us-east-1:${var.deploy_environment_id}:${local.trust_score_context}payments-user-trust-score-trusted-sns"
  protocol  = "sqs"
  endpoint  = module.sqs.sqs_topic_arn
}
Set trusted_ledger_sqs_target_subscription to false in the relevant configuration file.

Additionally, we are currently using xxxxxxxxxxxx as the host, but we need to change this once we decide what to use for hosting.

We are waiting for confirmation from xxxxxxxxxx regarding the service. Unfortunately, we won't be able to test it until the dependencies are deployed. However, from the link provided, we can see that the pipeline is not destroying any Terraform resources in the other AWS accounts.

