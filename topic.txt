|| Cluster || Addon 1 || Addon 2 || Addon 3 || ... || Addon 20 ||
| Cluster 1 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 2 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 3 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 4 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 5 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 6 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 7 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 8 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 9 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 10| [ ]      | [ ]      | [ ]      | ...  | [ ]       |


import subprocess
import json
import sys
import os
import requests
from datetime import datetime

# Adjust the path according to your project structure
common_dir = os.path.join(os.path.dirname(__file__), '..', 'common')
sys.path.insert(0, os.path.abspath(common_dir))

from clusters import CLUSTERS, switch_context, ANSIColors

# Disable warnings for unverified HTTPS requests
requests.packages.urllib3.disable_warnings()

def get_ingresses():
    cmd = ['kubectl', 'get', 'ing', '-o', 'json', '--all-namespaces']
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True, timeout=30)
        ingresses = json.loads(result.stdout)['items']
    except subprocess.CalledProcessError as e:
        print(f"{ANSIColors.RED}Error fetching ingresses: {e.stderr}{ANSIColors.ENDC}")
        return []
    except subprocess.TimeoutExpired:
        print(f"{ANSIColors.RED}Timeout expired fetching ingresses{ANSIColors.ENDC}")
        return []

    urls = []
    for ing in ingresses:
        for rule in ing.get('spec', {}).get('rules', []):
            host = rule.get('host')
            if host and 'http' not in host:
                host = 'https://' + host
            paths = rule.get('http', {}).get('paths', [])
            for path in paths:
                urls.append(host + path.get('path', '/health'))

    return urls

def check_endpoints(urls):
    status_200 = []
    status_not_200 = []
    for url in urls:
        try:
            response = requests.get(url, verify=False, timeout=10)
            if response.status_code == 200:
                status_200.append(f"{url}: '{response.status_code}' - SSL Working Fine")
            else:
                status_not_200.append(f"{ANSIColors.RED}{url}: '{response.status_code}' - Please investigate.{ANSIColors.ENDC}")
        except requests.exceptions.RequestException as e:
            status_not_200.append(f"{ANSIColors.RED}Request failed for {url}: {e}{ANSIColors.ENDC}")

    print("\n--- Status 200 ---")
    for message in status_200:
        print(message)

    print("\n--- Status NOT 200 ---")
    for message in status_not_200:
        print(message)

def main():
    for cluster_info in CLUSTERS:
        if switch_context(cluster_info):
            urls = get_ingresses()
            if urls:
                check_endpoints(urls)
            else:
                print(f"{ANSIColors.RED}No ingresses found in cluster: {cluster_info['name']}{ANSIColors.ENDC}")
        else:
            print(f"{ANSIColors.RED}Skipping checks for cluster: {cluster_info['name']}{ANSIColors.ENDC}")

if __name__ == "__main__":
    main()
