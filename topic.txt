import subprocess
import sys
import os

# Setup the path to the common directory to import clusters.py
common_dir = os.path.join(os.path.dirname(__file__), '..', 'common')
sys.path.insert(0, os.path.abspath(common_dir))

from clusters import CLUSTERS, switch_context, ANSIColors

def run_kubectl_command(cmd):
    """
    Runs a given kubectl command and prints its output.
    """
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"{ANSIColors.RED}Command failed: {' '.join(cmd)}\n{e.stderr}{ANSIColors.ENDC}")
        return None

def print_cluster_info():
    for cluster in CLUSTERS:
        if switch_context(cluster):
            print(f"{ANSIColors.CYAN}Information for cluster: {cluster['name']}{ANSIColors.ENDC}")
            
            # Component statuses
            print(f"{ANSIColors.GREEN}Component Statuses:{ANSIColors.ENDC}")
            print(run_kubectl_command(['kubectl', 'get', 'componentstatuses']))

            # Nodes
            print(f"{ANSIColors.GREEN}Nodes:{ANSIColors.ENDC}")
            print(run_kubectl_command(['kubectl', 'get', 'nodes']))

            # Node Conditions
            print(f"{ANSIColors.GREEN}Node Conditions:{ANSIColors.ENDC}")
            print(run_kubectl_command(['kubectl', 'describe', 'nodes']))

            # Top Nodes by CPU usage
            print(f"{ANSIColors.GREEN}Top Nodes by CPU:{ANSIColors.ENDC}")
            print(run_kubectl_command(['kubectl', 'top', 'nodes']))

            # Cluster Events
            print(f"{ANSIColors.GREEN}Recent Cluster Events:{ANSIColors.ENDC}")
            print(run_kubectl_command(['kubectl', 'get', 'events', '--sort-by=.metadata.creationTimestamp']))

            # Persistent Volume Claims
            print(f"{ANSIColors.GREEN}Persistent Volume Claims:{ANSIColors.ENDC}")
            print(run_kubectl_command(['kubectl', 'get', 'pvc', '--all-namespaces']))

if __name__ == "__main__":
    print_cluster_info()
