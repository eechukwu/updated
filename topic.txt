|| Cluster || Addon 1 || Addon 2 || Addon 3 || ... || Addon 20 ||
| Cluster 1 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 2 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 3 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 4 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 5 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 6 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 7 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 8 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 9 | [ ]      | [ ]      | [ ]      | ...  | [ ]       |
| Cluster 10| [ ]      | [ ]      | [ ]      | ...  | [ ]       |

          
import subprocess
import base64
import os
import sys
from datetime import datetime

common_dir = os.path.join(os.path.dirname(__file__), '..', 'common')
sys.path.insert(0, os.path.abspath(common_dir))

from clusters import CLUSTERS, switch_context

def get_certificate_expiration_date(cert_data_base64):
    """
    Extracts and returns the expiration date of a certificate.
    """
    try:
        cert_data_bytes = base64.b64decode(cert_data_base64)
        cert_data_str = cert_data_bytes.decode('utf-8')
        openssl_path = r'C:\Program Files\Git\mingw64\bin\openssl.exe'
        cert_end_date = subprocess.check_output(
            [openssl_path, 'x509', '-noout', '-enddate'],
            input=cert_data_str, text=True
        )
        expiration_date = cert_end_date.split('=')[1].strip()
        expiration_date = datetime.strptime(expiration_date, '%b %d %H:%M:%S %Y %Z')
        return expiration_date
    except subprocess.CalledProcessError as e:
        print(f"Error executing OpenSSL command: {e}")
        return None
    except Exception as e:
        print(f"Error decoding certificate: {e}")
        return None

def print_certificates_for_cluster(cluster_info):
    """
    Prints the certificates for the given cluster along with their expiration dates.
    """
    certificates = []

    if not switch_context(cluster_info):
        return

    try:
        cmd = [
            'kubectl', 'get', 'secret', '--namespace=gke-system',
            '--field-selector', 'type=kubernetes.io/tls',
            r'-o=jsonpath={range .items[*]}{.metadata.name}{"\t"}{.data.tls\.crt}{"\n"}{end}'
        ]
        cert_data_list = subprocess.check_output(cmd, text=True).splitlines()

        for cert_data in cert_data_list:
            name, cert_data_base64 = cert_data.split('\t')
            expiration_date = get_certificate_expiration_date(cert_data_base64)
            if expiration_date:
                certificates.append((name, expiration_date))
            else:
                certificates.append((name, None))

        # Sort certificates by expiration date for the current cluster
        sorted_certificates = sorted(certificates, key=lambda x: x[1] if x[1] is not None else datetime.max)
        
        # Print the sorted certificates including cluster information
        print(f"\nCertificates for cluster: {cluster_info['name']}")
        print(f"{'Certificate Name':<40} | {'Expiration Date':<20}")
        print("-" * 61)

        for name, expiration_date in sorted_certificates:
            date_str = expiration_date.strftime("%d %B %Y at %I:%M%p") if expiration_date else "Error checking certificate"
            print(f"{name:<40} | {date_str:<20}")

    except subprocess.CalledProcessError as e:
        print(f"Error checking certificates on cluster {cluster_info['context']}: {e}")

# Iterate over clusters and print certificates
for cluster in CLUSTERS:
    print_certificates_for_cluster(cluster)
