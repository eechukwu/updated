import subprocess
import sys
import os

# Setup the path to the common directory to import clusters.py
common_dir = os.path.join(os.path.dirname(__file__), '..', 'common')
sys.path.insert(0, os.path.abspath(common_dir))

from clusters import CLUSTERS, switch_context, ANSIColors

ignore_namespaces = [
    "anthos-identity-service", "argocd", "argoworkflows", "bigip", "cert-manager",
    "config-management-system", "external-secrets", "gatekeeper-system", "gke-connect",
    "gke-managed-metrics-server", "gke-system", "kube-system"
]

def run_kubectl_command(cmd):
    """
    Runs a given kubectl command and prints its output.
    """
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"{ANSIColors.RED}Command failed: {' '.join(cmd)}\n{e.stderr}{ANSIColors.ENDC}")
        return None

def filter_namespaces(output):
    """
    Filters out lines that include any of the namespaces to ignore.
    """
    lines = output.split('\n')
    filtered_lines = [line for line in lines if not any(ns in line for ns in ignore_namespaces)]
    return '\n'.join(filtered_lines)

def print_application_info():
    for cluster in CLUSTERS:
        if switch_context(cluster):
            print(f"{ANSIColors.CYAN}Application Information for cluster: {cluster['name']}{ANSIColors.ENDC}")

            # Deployments
            print(f"{ANSIColors.GREEN}Deployments:{ANSIColors.ENDC}")
            deployments_output = run_kubectl_command(['kubectl', 'get', 'deployments', '--all-namespaces'])
            print(filter_namespaces(deployments_output))

            # Pods
            print(f"{ANSIColors.GREEN}Pods:{ANSIColors.ENDC}")
            pods_output = run_kubectl_command(['kubectl', 'get', 'pods', '--all-namespaces'])
            print(filter_namespaces(pods_output))

            # Pods with Restart Counts
            print(f"{ANSIColors.GREEN}Pods by Restart Count:{ANSIColors.ENDC}")
            pods_restarts_output = run_kubectl_command([
                'kubectl', 'get', 'pods', '--all-namespaces', 
                '-o', 'custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,RESTARTS:.status.containerStatuses[0].restartCount'
            ])
            print(filter_namespaces(pods_restarts_output))

            # Top Pods by CPU usage
            print(f"{ANSIColors.GREEN}Top Pods by CPU:{ANSIColors.ENDC}")
            top_pods_cpu_output = run_kubectl_command(['kubectl', 'top', 'pods', '--all-namespaces', '--sort-by=cpu'])
            print(filter_namespaces(top_pods_cpu_output))

            # Top Pods by Memory usage
            print(f"{ANSIColors.GREEN}Top Pods by Memory:{ANSIColors.ENDC}")
            top_pods_memory_output = run_kubectl_command(['kubectl', 'top', 'pods', '--all-namespaces', '--sort-by=memory'])
            print(filter_namespaces(top_pods_memory_output))

            # Services
            print(f"{ANSIColors.GREEN}Services:{ANSIColors.ENDC}")
            services_output = run_kubectl_command(['kubectl', 'get', 'services', '--all-namespaces'])
            print(filter_namespaces(services_output))

            # ReplicaSets
            print(f"{ANSIColors.GREEN}ReplicaSets:{ANSIColors.ENDC}")
            replicasets_output = run_kubectl_command(['kubectl', 'get', 'replicasets', '--all-namespaces'])
            print(filter_namespaces(replicasets_output))

            # StatefulSets
            print(f"{ANSIColors.GREEN}StatefulSets:{ANSIColors.ENDC}")
            statefulsets_output = run_kubectl_command(['kubectl', 'get', 'statefulsets', '--all-namespaces'])
            print(filter_namespaces(statefulsets_output))

if __name__ == "__main__":
    print_application_info()
